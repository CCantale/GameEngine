			LEMME GameEngine

Welcome to the LEMME game engine documentation.

LEMME is a game engine that aims to help developers prototype 2D games.
It provides a playable demo right from start that the user can tweak in order
to test the feature(s) that they have in mind.





				SETUP

LEMME is designed to be as lightweight as possible. For this reason, it comes
in multiple packages. To use it, link libLEMMEstart.a plus the preferred 
libraries, depending on the kind of game that you're planning to make. The same
stands for the header files (LEMMEstart or LEMMEstart.h plus the extentions you
need).

The main function signature must be:

int	main(int, char**);

or

int	main(int, char[]*);

But the latter is utterly disgusting.





			# include <LEMMEstart>

This library must always be included. It is the core of the engine and deals with
initialization, window creation, game loop, input handling and exit.



									init.h

File: [../includes/init.h]

Here you'll find everything concerning the initialization of LEMME and the start
of the game loop.
Start by calling init(), specifying the required info for the window creation.
Then, you may want to call update() to define a function that will be called at
each loop. This function's fignature must be:

void	<funcion_name>(void);

Finally, call start() to start the game loop. Call quit() to turn off the
engine. Call stop() to simply end the loop. You can then restart the loop by
just calling start() again.

FLAGS:
	LM_WINDOWPOS_CENTERED	To use as second and/or third argument of init().
				Sets the x or y position value in order for the
				window to be in the center of the screen.

	LM_WINDOW_FULLSCREEN	To create a fullscreen window.

	LM_WINDOW_NOFULLSCREEN	Not to crea-Ok, you guessed it.


Example.

void	waitAndExit(void)
{
	static int	atEachLoop = 0;

	++atEachLoop;
	std::cout << "Loop nbr " << atEachLoop << std::endl;
	if (atEachLoop > 9)
		LEMME::quit();
}

int	main(int argc, char **argv)
{
	std::cout << "Starting test..." << std::endl;


	LEMME::init("test", LM_WINDOWPOS_CENTERED, LM_WINDOWPOS_CENTERED,
			800, 600, LM_WINDOW_NOFULLSCREEN);
	LEMME::update(waitAndExit);
	LEMME::start();


	std::cout << "... End of test." << std::endl;
	return (0);
}


									input.h

File: [../includes/input.h]

The mapKey() function can be used to link a custom function to a specific key.
The function's signature must be:

void <function_name>(void);

The first argument passed to mapKey() is the corresponding lowercase character
to the chosen key. Some keys don't refer to a printable character. LEMME provides
provides macros for some of those.

Macros:
	LMK_ESC             escape
	LMK_RETURN          return
	LMK_SPACE           spacebar
	LMK_UP              up arrow
	LMK_DOWN            down arrow
	LMK_LEFT            left arrow
	LMK_RIGHT           right arrow

LMK does not stand for 'let me know', btw.


Example.

void	printE(void)
{
	std::cout << "You just typed \'e\'." << std::endl;
}

void	printLeft(void)
{
	std::cout << "You just pressed the left arrow key." << std::endl;
}

int	main(int argc, char **argv)
{
	std::cout << "Starting test..." << std::endl;


	LEMME::init("test", LM_WINDOWPOS_CENTERED, LM_WINDOWPOS_CENTERED,
			800, 600, LM_WINDOW_NOFULLSCREEN);
	LEMME::mapKey('e', printE);
	LEMME::mapKey(LMK_LEFT, printLeft);
	LEMME::start();


	std::cout << "... End of test." << std::endl;
	return (0);
}


									delta.h

File: [../includes/delta.h]

Use getDelta() to get the delta time value for the current frame (type: Uint32).



									log.h

File: [../includes/log.h]

First call login(), then use LEMME::lout, LEMME::lwar and LEMME::lerr instead
of std::cout, std::cwar and std::cerr.
The macro "timestamp" can be inserted in the stream to have a nice timestamp in
the entry.
Remember to call logout() at the end of your program.
LEMME will create a new directory named "Logbook" with a log file inside. cat
it to see the log in colors. The file is overwritten everytime the program runs.
                                                                         
                                                                         
Example:

int	main(int argc, char** argv)
{
	LEMME::login();
                                                                         
	// stuff
                                                                       
	if (LEMME::init("test", LM_WINDOWPOS_CENTERED, LM_WINDOWPOS_CENTERED,
                 		800, 600, LM_WINDOW_NOFULLSCREEN) == 0)
	{
    		LEMME::lout << timestamp << "Everything up and running!\n";
	}
	else
	{
    		LEMME::lerr << timestamp << "Fuck. Why...\n";
	}
                                                                         
	// more stuff
                                                                         
	LEMME::logout();

	return (0);
}
                                                                         
                                                                         
If you use Vim, you can add something like this to your .vimrc config file to        
display the log file by just typing "log" while in normal mode:          
                                                                         
nmap log :!cat Logbook/log                                               

